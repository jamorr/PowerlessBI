read_clipboard
 (sep: 'str' = '\\s+'
 **kwargs)

read_csv
 (filepath_or_buffer: 'FilePath | ReadCsvBuffer[bytes] | ReadCsvBuffer[str]'
 *
 sep: 'str | None | lib.NoDefault' = <no_default>
 delimiter: 'str | None | lib.NoDefault' = None
 header: "int | Sequence[int] | None | Literal['infer']" = 'infer'
 names: 'Sequence[Hashable] | None | lib.NoDefault' = <no_default>
 index_col: 'IndexLabel | Literal[False] | None' = None
 usecols=None
 squeeze: 'bool | None' = None
 prefix: 'str | lib.NoDefault' = <no_default>
 mangle_dupe_cols: 'bool' = True
 dtype: 'DtypeArg | None' = None
 engine: 'CSVEngine | None' = None
 converters=None
 true_values=None
 false_values=None
 skipinitialspace: 'bool' = False
 skiprows=None
 skipfooter: 'int' = 0
 nrows: 'int | None' = None
 na_values=None
 keep_default_na: 'bool' = True
 na_filter: 'bool' = True
 verbose: 'bool' = False
 skip_blank_lines: 'bool' = True
 parse_dates=None
 infer_datetime_format: 'bool' = False
 keep_date_col: 'bool' = False
 date_parser=None
 dayfirst: 'bool' = False
 cache_dates: 'bool' = True
 iterator: 'bool' = False
 chunksize: 'int | None' = None
 compression: 'CompressionOptions' = 'infer'
 thousands: 'str | None' = None
 decimal: 'str' = '.'
 lineterminator: 'str | None' = None
 quotechar: 'str' = '"'
 quoting: 'int' = 0
 doublequote: 'bool' = True
 escapechar: 'str | None' = None
 comment: 'str | None' = None
 encoding: 'str | None' = None
 encoding_errors: 'str | None' = 'strict'
 dialect: 'str | csv.Dialect | None' = None
 error_bad_lines: 'bool | None' = None
 warn_bad_lines: 'bool | None' = None
 on_bad_lines=None
 delim_whitespace: 'bool' = False
 low_memory=True
 memory_map: 'bool' = False
 float_precision: "Literal['high'
 'legacy'] | None" = None
 storage_options: 'StorageOptions' = None) -> 'DataFrame | TextFileReader'

read_excel
 (io
 sheet_name: 'str | int | list[IntStrT] | None' = 0
 *
 header: 'int | Sequence[int] | None' = 0
 names: 'list[str] | None' = None
 index_col: 'int | Sequence[int] | None' = None
 usecols: 'int | str | Sequence[int] | Sequence[str] | Callable[[str]
 bool] | None' = None
 squeeze: 'bool | None' = None
 dtype: 'DtypeArg | None' = None
 engine: "Literal['xlrd'
 'openpyxl'
 'odf'
 'pyxlsb'] | None" = None
 converters: 'dict[str
 Callable] | dict[int
 Callable] | None' = None
 true_values: 'Iterable[Hashable] | None' = None
 false_values: 'Iterable[Hashable] | None' = None
 skiprows: 'Sequence[int] | int | Callable[[int]
 object] | None' = None
 nrows: 'int | None' = None
 na_values=None
 keep_default_na: 'bool' = True
 na_filter: 'bool' = True
 verbose: 'bool' = False
 parse_dates: 'list | dict | bool' = False
 date_parser: 'Callable | None' = None
 thousands: 'str | None' = None
 decimal: 'str' = '.'
 comment: 'str | None' = None
 skipfooter: 'int' = 0
 convert_float: 'bool | None' = None
 mangle_dupe_cols: 'bool' = True
 storage_options: 'StorageOptions' = None) -> 'DataFrame | dict[IntStrT
 DataFrame]'

read_feather
 (path: 'FilePath | ReadBuffer[bytes]'
 columns: 'Sequence[Hashable] | None' = None
 use_threads: 'bool' = True
 storage_options: 'StorageOptions' = None)

read_fwf
 (filepath_or_buffer: 'FilePath | ReadCsvBuffer[bytes] | ReadCsvBuffer[str]'
 *
 colspecs: 'Sequence[tuple[int
 int]] | str | None' = 'infer'
 widths: 'Sequence[int] | None' = None
 infer_nrows: 'int' = 100
 **kwds) -> 'DataFrame | TextFileReader'

read_gbq
 (query: 'str'
 project_id: 'str | None' = None
 index_col: 'str | None' = None
 col_order: 'list[str] | None' = None
 reauth: 'bool' = False
 auth_local_webserver: 'bool' = True
 dialect: 'str | None' = None
 location: 'str | None' = None
 configuration: 'dict[str
 Any] | None' = None
 credentials=None
 use_bqstorage_api: 'bool | None' = None
 max_results: 'int | None' = None
 progress_bar_type: 'str | None' = None) -> 'DataFrame'

read_hdf
 (path_or_buf: 'FilePath | HDFStore'
 key=None
 mode: 'str' = 'r'
 errors: 'str' = 'strict'
 where: 'str | list | None' = None
 start: 'int | None' = None
 stop: 'int | None' = None
 columns: 'list[str] | None' = None
 iterator: 'bool' = False
 chunksize: 'int | None' = None
 **kwargs)

read_html
 (io: 'FilePath | ReadBuffer[str]'
 *
 match: 'str | Pattern' = '.+'
 flavor: 'str | None' = None
 header: 'int | Sequence[int] | None' = None
 index_col: 'int | Sequence[int] | None' = None
 skiprows: 'int | Sequence[int] | slice | None' = None
 attrs: 'dict[str
 str] | None' = None
 parse_dates: 'bool' = False
 thousands: 'str | None' = '
'
 encoding: 'str | None' = None
 decimal: 'str' = '.'
 converters: 'dict | None' = None
 na_values: 'Iterable[object] | None' = None
 keep_default_na: 'bool' = True
 displayed_only: 'bool' = True
 extract_links: "Literal[None
 'header'
 'footer'
 'body'
 'all']" = None) -> 'list[DataFrame]'

read_json
 (path_or_buf: 'FilePath | ReadBuffer[str] | ReadBuffer[bytes]'
 *
 orient: 'str | None' = None
 typ: "Literal['frame'
 'series']" = 'frame'
 dtype: 'DtypeArg | None' = None
 convert_axes=None
 convert_dates: 'bool | list[str]' = True
 keep_default_dates: 'bool' = True
 numpy: 'bool' = False
 precise_float: 'bool' = False
 date_unit: 'str | None' = None
 encoding: 'str | None' = None
 encoding_errors: 'str | None' = 'strict'
 lines: 'bool' = False
 chunksize: 'int | None' = None
 compression: 'CompressionOptions' = 'infer'
 nrows: 'int | None' = None
 storage_options: 'StorageOptions' = None) -> 'DataFrame | Series | JsonReader'

read_orc
 (path: 'FilePath | ReadBuffer[bytes]'
 columns: 'list[str] | None' = None
 **kwargs) -> 'DataFrame'

read_parquet
 (path: 'FilePath | ReadBuffer[bytes]'
 engine: 'str' = 'auto'
 columns: 'list[str] | None' = None
 storage_options: 'StorageOptions' = None
 use_nullable_dtypes: 'bool' = False
 **kwargs) -> 'DataFrame'

read_pickle
 (filepath_or_buffer: 'FilePath | ReadPickleBuffer'
 compression: 'CompressionOptions' = 'infer'
 storage_options: 'StorageOptions' = None)

read_sas
 (filepath_or_buffer: 'FilePath | ReadBuffer[bytes]'
 *
 format: 'str | None' = None
 index: 'Hashable | None' = None
 encoding: 'str | None' = None
 chunksize: 'int | None' = None
 iterator: 'bool' = False
 compression: 'CompressionOptions' = 'infer') -> 'DataFrame | ReaderBase'

read_spss
 (path: 'str | Path'
 usecols: 'Sequence[str] | None' = None
 convert_categoricals: 'bool' = True) -> 'DataFrame'

read_sql
 (sql
 con
 index_col: 'str | list[str] | None' = None
 coerce_float: 'bool' = True
 params=None
 parse_dates=None
 columns: 'list[str] | None' = None
 chunksize: 'int | None' = None) -> 'DataFrame | Iterator[DataFrame]'

read_sql_query
 (sql
 con
 index_col: 'str | list[str] | None' = None
 coerce_float: 'bool' = True
 params: 'list[str] | dict[str
 str] | None' = None
 parse_dates: 'list[str] | dict[str
 str] | None' = None
 chunksize: 'int | None' = None
 dtype: 'DtypeArg | None' = None) -> 'DataFrame | Iterator[DataFrame]'

read_sql_table
 (table_name: 'str'
 con
 schema: 'str | None' = None
 index_col: 'str | list[str] | None' = None
 coerce_float: 'bool' = True
 parse_dates: 'list[str] | dict[str
 str] | None' = None
 columns: 'list[str] | None' = None
 chunksize: 'int | None' = None) -> 'DataFrame | Iterator[DataFrame]'

read_stata
 (filepath_or_buffer: 'FilePath | ReadBuffer[bytes]'
 *
 convert_dates: 'bool' = True
 convert_categoricals: 'bool' = True
 index_col: 'str | None' = None
 convert_missing: 'bool' = False
 preserve_dtypes: 'bool' = True
 columns: 'Sequence[str] | None' = None
 order_categoricals: 'bool' = True
 chunksize: 'int | None' = None
 iterator: 'bool' = False
 compression: 'CompressionOptions' = 'infer'
 storage_options: 'StorageOptions' = None) -> 'DataFrame | StataReader'

read_table
 (filepath_or_buffer: 'FilePath | ReadCsvBuffer[bytes] | ReadCsvBuffer[str]'
 *
 sep: 'str | None | lib.NoDefault' = <no_default>
 delimiter: 'str | None | lib.NoDefault' = None
 header: "int | Sequence[int] | None | Literal['infer']" = 'infer'
 names: 'Sequence[Hashable] | None | lib.NoDefault' = <no_default>
 index_col: 'IndexLabel | Literal[False] | None' = None
 usecols=None
 squeeze: 'bool | None' = None
 prefix: 'str | lib.NoDefault' = <no_default>
 mangle_dupe_cols: 'bool' = True
 dtype: 'DtypeArg | None' = None
 engine: 'CSVEngine | None' = None
 converters=None
 true_values=None
 false_values=None
 skipinitialspace: 'bool' = False
 skiprows=None
 skipfooter: 'int' = 0
 nrows: 'int | None' = None
 na_values=None
 keep_default_na: 'bool' = True
 na_filter: 'bool' = True
 verbose: 'bool' = False
 skip_blank_lines: 'bool' = True
 parse_dates=False
 infer_datetime_format: 'bool' = False
 keep_date_col: 'bool' = False
 date_parser=None
 dayfirst: 'bool' = False
 cache_dates: 'bool' = True
 iterator: 'bool' = False
 chunksize: 'int | None' = None
 compression: 'CompressionOptions' = 'infer'
 thousands: 'str | None' = None
 decimal: 'str' = '.'
 lineterminator: 'str | None' = None
 quotechar: 'str' = '"'
 quoting: 'int' = 0
 doublequote: 'bool' = True
 escapechar: 'str | None' = None
 comment: 'str | None' = None
 encoding: 'str | None' = None
 encoding_errors: 'str | None' = 'strict'
 dialect: 'str | csv.Dialect | None' = None
 error_bad_lines: 'bool | None' = None
 warn_bad_lines: 'bool | None' = None
 on_bad_lines=None
 delim_whitespace=False
 low_memory=True
 memory_map: 'bool' = False
 float_precision: 'str | None' = None
 storage_options: 'StorageOptions' = None) -> 'DataFrame | TextFileReader'

read_xml
 (path_or_buffer: 'FilePath | ReadBuffer[bytes] | ReadBuffer[str]'
 *
 xpath: 'str' = './*'
 namespaces: 'dict[str
 str] | None' = None
 elems_only: 'bool' = False
 attrs_only: 'bool' = False
 names: 'Sequence[str] | None' = None
 dtype: 'DtypeArg | None' = None
 converters: 'ConvertersArg | None' = None
 parse_dates: 'ParseDatesArg | None' = None
 encoding: 'str | None' = 'utf-8'
 parser: 'XMLParsers' = 'lxml'
 stylesheet: 'FilePath | ReadBuffer[bytes] | ReadBuffer[str] | None' = None
 iterparse: 'dict[str
 list[str]] | None' = None
 compression: 'CompressionOptions' = 'infer'
 storage_options: 'StorageOptions' = None) -> 'DataFrame'

